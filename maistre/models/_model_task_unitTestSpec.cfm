<cfsetting showdebugoutput="false" ><cfset variables.datasource = "projectDevelopment"><cfimport taglib="/cfspec"><!---querys used for testing in the test functions below--->	<cfquery datasource="#variables.datasource#">		DELETE FROM			pm_users		WHERE			user_name='test username 523411'	</cfquery>		<cfquery datasource="#variables.datasource#" result="project_id">		DELETE FROM			pm_projects		WHERE			title='test title 1237771233'	</cfquery>		<cfquery datasource="#variables.datasource#" result="user_id">		INSERT INTO 			pm_users		SET			user_name='test username 523411',			password='937EE4AF1A7A08949AFA0AC110229FCE',			email='test@test.com2387123',			gh_username='gh_tester126128',			description='test description 1283999992321237787',			image_url='test.jpg 1239812996523',			date_added=NOW()	</cfquery>	<cfquery datasource="#variables.datasource#" result="project_id">		INSERT INTO 			pm_projects		SET			title='test title 1237771233',			description='test description 123897723',			date_created=NOW(),			manager_id=#user_id.generatedkey#,			image_url='testporject.jpg 0987368723',			gh_repository_id='89238',			status=1	</cfquery>		<cfset model = new _model_task("projectDevelopment")>		<cfset args2={}>	<cfset args2.title="default test test 1238721376623">	<cfset args2.description="default 2test test 981237721">		<cfset args2.project_id=project_id.generatedkey>	<cfset args2.user_id=user_id.generatedkey>	<cfset args2.priority=2>	<cfset args2.status=3>		<cfset task_added = model.add_task(argumentCollection=args2)>			<!---end test querys---><describe hint="_model_task.cfc for maistre">		<it should="be an object">		<cfset $(model).shouldBeObject()>	</it>			<!---                       										add_task   													--->	<describe hint="****add_task method****">		<cfset args={}>		<cfset args.title="test test 1238721376623">		<cfset args.description="2test test 981237721">				<cfset args.project_id=project_id.generatedkey>		<cfset args.user_id=user_id.generatedkey>		<cfset args.priority=2>		<cfset args.status=3>				<it should="add a new task">			<cfset model.add_task(argumentCollection=args)>			<cfquery datasource="#variables.datasource#" name="check_task_add">				SELECT title FROM pm_tasks WHERE title = '#args.title#'			</cfquery>			<cfset $(check_task_add.title).shouldEqual(#args.title#) >		</it>				<it should="return a -1 if the add fails">			<cfset args.project_id=9816723891283978970128703879128791238977897891>			<cfset $(model).add_task(argumentCollection=args).shouldBeNumeric()>			<cfset args.project_id=project_id.generatedkey>		</it>				<it should="return the created task's id if the add is successful">			<cfset test = model.add_task(argumentCollection=args)>						<cfquery datasource="#variables.datasource#" name="task_is_added_success">				SELECT tasks_id FROM pm_tasks WHERE title = '#args.title#'			</cfquery>			<cfset $(task_is_added_success.tasks_id).shouldEqual(#test#) >		</it>				</describe><!---end add_task--->			<!---                       										get_tasks   													--->	<describe hint="****get_tasks method****">				<cfset args={}>		<cfset args.tasks_per_page=5>		<cfset args.page=1>				<cfset args.project_id=project_id.generatedkey>		<cfset args.user_id=user_id.generatedkey>				<it should="return a struct">			<cfset $(model).get_tasks(argumentCollection = args).shouldBeStruct()>		</it>			<describe hint="returned struct">				<it should="have the correct keys '{query,count}'">					<cfset $( structKeyList(model.get_tasks(argumentCollection=args))).shouldEqual("QUERY,COUNT")>				</it>								<describe hint="struct.query">					<cfset test = model.get_tasks(argumentCollection=args)>					<it should="be a query">						<cfset $(test.query).shouldBeQuery()>					</it>											<it should="have the correct columns DATE_ADDED,DESCRIPTION,PRIORITY,PROJECT_ID,STATUS,TASKS_ID,TITLE,USER_ID,USER_NAME">						<cfset $(test.query.columnList).shouldEqual("DATE_ADDED,DESCRIPTION,PRIORITY,PROJECT_ID,STATUS,TASKS_ID,TITLE,USER_ID,USER_NAME")>					</it>				</describe>				<describe hint="struct.count">					<cfset test = model.get_tasks(argumentCollection=args)>					<it should="be a numeric value">						<cfset $(test.count).shouldBeNumeric()>					</it>				</describe>								</describe>	</describe> <!---end get_tasks--->			<!---                       										edit_task   													--->	<describe hint="****edit_task method****">		<cfset args={}>		<cfset args.task_id=#task_added#>		<cfset args.title="modified test 1238721376623">		<cfset args.description="2test test 981237721">				<cfset args.project_id=project_id.generatedkey>		<cfset args.user_id=user_id.generatedkey>		<cfset args.priority=1>		<cfset args.status=3>		<cfset args.user_id=4>				<it should="edit task information">			<cfset task_edited = model.edit_task(argumentCollection=args)>			<cfquery datasource="#variables.datasource#" name="edited_task_info">				SELECT 					title				FROM					pm_tasks				WHERE 					tasks_id=#task_added#			</cfquery>			<cfset $(edited_task_info.title).shouldEqual("modified test 1238721376623")>		</it>				<it should="return a numeric value">			<cfset task_edited = model.edit_task(argumentCollection=args)>			<cfset $(task_edited).shouldBeNumeric()>		</it>		<describe hint="returned value">			<it should="return a -1 if there was an error">				<cfset args.user_id=498123897123891238891238712378912387913>				<cfset task_edited = model.edit_task(argumentCollection=args)>				<cfset $(task_edited).shouldEqual(-1)>			</it>						<it should="return the edited task's id if edit was successful">				<cfset task_edited = model.edit_task(argumentCollection=args)>				<cfset $(task_edited).shouldEqual(#task_added#)>			</it>		</describe>	</describe><!---end edit_task--->		<!---                       										delete_task   													--->	<describe hint="****delete_task method****">		<it	should="delete a task">			<cfquery datasource="#variables.datasource#" result="temp_add_task">				INSERT INTO					pm_tasks								SET					title="test 23901823",					project_id=#project_id.generatedkey#,					user_id=#user_id.generatedkey#			</cfquery>						<cfset model.delete_task(temp_add_task.generatedkey)>						<cfquery datasource="#variables.datasource#" name="looking_for_deleted">				SELECT *				FROM					pm_tasks				WHERE					tasks_id = #temp_add_task.generatedkey#			</cfquery>			<cfset $(looking_for_deleted).shouldBeEmpty()>		</it>				<it should="should return a numeric value">					<cfquery datasource="#variables.datasource#" result="temp_add_task2">				INSERT INTO					pm_tasks								SET					title="test 23901823",					project_id=#project_id.generatedkey#,					user_id=#user_id.generatedkey#			</cfquery>			<cfset edit_test_value = model.delete_task(temp_add_task2.generatedkey)>						<cfset $(edit_test_value).shouldBeNumeric()>					</it>			<describe hint="returned numeric value">								<it should="be the deleted tasks id if delete is successful">					<cfquery datasource="#variables.datasource#" result="temp_add_task2">						INSERT INTO							pm_tasks												SET							title="test 23901823",							project_id=#project_id.generatedkey#,							user_id=#user_id.generatedkey#					</cfquery>					<cfset edit_test_value = model.delete_task(temp_add_task2.generatedkey)>					<cfset $(edit_test_value).shouldEqual(temp_add_task2.generatedkey)>				</it>								<it should="be -1 if the delete fails">										<cfset edit_test_value = model.delete_task(-123123)>					<cfset $(edit_test_value).shouldEqual(-1)>				</it>						</describe>	</describe> <!---end delete_task--->				<!---                       										add_task_note   													--->	<!---	<cfargument name="task_id" type="numeric" required="true">	<cfargument name="user_id" type="numeric" required="true">	<cfargument name="content" type="string" required="true">	<cfargument name="commit_id" type="string" required="false" default="">	--->	<describe hint="****add_task_note method****">		<cfset args={}>		<cfset args.task_id=task_added>		<cfset args.user_id=user_id.generatedkey>		<cfset args.commit_id ="123344">				<cfset args.content="test note content 123987123812">				<it should="add a new task note">			<cfset model.add_task_note(argumentCollection=args)>			<cfquery datasource="#variables.datasource#" name="check_task_note_add">				SELECT content FROM pm_tasks_notes WHERE content = '#args.content#'			</cfquery>			<cfset $(check_task_note_add.content).shouldEqual(#args.content#) >		</it>				<it should="return a -1 if the add fails">			<cfset args.task_id=9816723891283978970128703879128791238977897891>			<cfset $(model).add_task_note(argumentCollection=args).shouldEqual(-1)>			<cfset args.project_id=project_id.generatedkey>		</it>				<it should="return the created task's id if the add is successful">			<cfset test = model.add_task_note(argumentCollection=args)>						<cfquery datasource="#variables.datasource#" name="task_note_is_added_success">				SELECT task_note_id FROM pm_tasks_notes WHERE content = '#args.content#'			</cfquery>			<cfset $(task_note_is_added_success.task_note_id).shouldEqual(#test#) >		</it>				</describe><!---end add_task_note--->		<!---                       										get_task_notes     													--->	<describe hint="****get_task_notes method****">				<cfset args={}>		<cfset args.task_id = task_added>		<cfset args.notes_per_page=5>		<cfset args.page=1>				<cfset args.user_id=user_id.generatedkey>				<it should="return a struct">			<cfset $(model).get_task_notes(argumentCollection = args).shouldBeStruct()>		</it>			<describe hint="returned struct">				<it should="have the correct keys '{query,count}'">					<cfset $( structKeyList(model.get_task_notes(argumentCollection=args))).shouldEqual("QUERY,COUNT")>				</it>								<describe hint="struct.query">					<cfset test = model.get_task_notes(argumentCollection=args)>					<it should="be a query">						<cfset $(test.query).shouldBeQuery()>					</it>											<it should="have the correct columns COMMIT_ID,CONTENT,DATE_POSTED,TASK_ID,TASK_NOTE_ID,USER_ID,USER_NAME">						<cfset $(test.query.columnList).shouldEqual("COMMIT_ID,CONTENT,DATE_POSTED,TASK_ID,TASK_NOTE_ID,USER_ID,USER_NAME")>					</it>				</describe>				<describe hint="struct.count">					<cfset test = model.get_task_notes(argumentCollection=args)>					<it should="be a numeric value">						<cfset $(test.count).shouldBeNumeric()>					</it>				</describe>								</describe>	</describe> <!---end get_task_notes--->				<!---                       										edit_task_note  													--->	<!---<describe hint="****edit_task_note method****">		<before>			<cfset args={}>		<cfset args.task_note_id=#test_note#>		<cfset args.content="modified test 1238721376623">		</before>		<it should="actually work">		<cfset args3.task_id=#task_added#>		<cfset args3.user_id=#user_id.generatedkey#>				<cfset args3.content="test note content 123987123812">				<cfset test_note = model.add_task_note(argumentCollection=args3)>					<cfset $(test_note).shouldBeNumeric()>		<cfquery datasource="#variables.datasource#" name="edited_task_note_info">				SELECT 					content				FROM					pm_tasks_notes				WHERE 					task_id=#test_note#			</cfquery>			<cfset $(edited_task_note_info.recordCount).shouldEqualNumeric(1)>		<cfset $(edited_task_note_info.content).shouldEqual(args3.content)>							<cfset task_note_edited = model.edit_task_note(argumentCollection=args)>			<cfquery datasource="#variables.datasource#" name="edited_task_note_info">				SELECT 					content				FROM					pm_tasks_notes				WHERE 					task_id=#test_note#			</cfquery>			<cfset $(edited_task_note_info.content).shouldEqual(args.content)>					<cfset task_note_edited = model.edit_task_note(argumentCollection=args)>			<cfset $(task_note_edited).shouldBeNumeric()>		</it>		<describe hint="returned value">			<it should="return a -1 if there was an error">				<cfset args.task_note_id=-498123897123891238891238712378912387913>				<cfset task_note_edited = model.edit_task_note(argumentCollection=args)>				<cfset $(task_note_edited).shouldEqual(-1)>			</it>						<it should="return the edited task's id if edit was successful">				<cfset task_note_edited = model.edit_task_note(argumentCollection=args)>				<cfset $(task_note_edited).shouldEqual(#test_note#)>			</it>		</describe>	</describe>---><!---end edit_task_note--->			<!---                       										delete_task_note   													--->	<describe hint="****delete_task_note method****">		<it	should="delete a task note">			<cfquery datasource="#variables.datasource#" result="temp_add_task_note">				INSERT INTO					pm_tasks_notes								SET					content="test 23901823",					task_id=#task_added#,					user_id=#user_id.generatedkey#			</cfquery>						<cfset model.delete_task_note(temp_add_task_note.generatedkey)>						<cfquery datasource="#variables.datasource#" name="looking_for_deleted_note">				SELECT *				FROM					pm_tasks_notes				WHERE					task_note_id = #temp_add_task_note.generatedkey#			</cfquery>			<cfset $(looking_for_deleted_note).shouldBeEmpty()>		</it>				<it should="should return a numeric value">					<cfquery datasource="#variables.datasource#" result="temp_add_task_note2">				INSERT INTO					pm_tasks_notes								SET					content="test 23901823",					task_id=#task_added#,					user_id=#user_id.generatedkey#			</cfquery>			<cfset edit_note_test_value = model.delete_task_note(temp_add_task_note2.generatedkey)>						<cfset $(edit_note_test_value).shouldBeNumeric()>					</it>			<describe hint="returned numeric value">								<it should="be the deleted task note's id if delete is successful">					<cfquery datasource="#variables.datasource#" result="temp_add_task_note2">						INSERT INTO							pm_tasks_notes												SET							content="test 23901823",							task_id=#task_added#,							user_id=#user_id.generatedkey#					</cfquery>					<cfset edit_note_test_value = model.delete_task_note(temp_add_task_note2.generatedkey)>					<cfset $(edit_note_test_value).shouldEqual(temp_add_task_note2.generatedkey)>				</it>								<it should="be -1 if the delete fails">										<cfset edit_note_test_value = model.delete_task_note(-123123)>					<cfset $(edit_note_test_value).shouldEqual(-1)>				</it>						</describe>	</describe> <!---end delete_task_note--->--->			<cfquery datasource="#variables.datasource#">		DELETE FROM			pm_users		WHERE			user_name='test username 523411'	</cfquery>		<cfquery datasource="#variables.datasource#" result="project_id">		DELETE FROM			pm_projects		WHERE			title='test title 1237771233'	</cfquery>	</describe>